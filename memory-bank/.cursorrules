# Cursor Rules - Updated on May 29, 2024 11:15 EST

## Project Structure

### Routing Structure - March 9, 2025

The application uses Next.js App Router with the following structure:

- `/` - Home page with links to specific use cases
- `/chat` - Redirects to `/chat/onboarding` for better user experience
- `/chat/[useCase]` - Dynamic route for specific use cases (onboarding, sales, knowledge)
- `/documents` - Document management page
- `/prompts` - Example prompts browsing page
- `/admin/prompts` - Admin interface for managing prompts
- `/admin/analytics` - Analytics dashboard for prompt usage
- `/api/*` - API routes for chat, documents, file uploads, and prompts

### Component Organization - March 8, 2025

- `src/components/ui` - Reusable UI components (buttons, inputs, etc.)
- `src/components/layout` - Layout components (header, footer, etc.)
- `src/components/chat` - Chat-specific components
- `src/components/file-upload` - File upload components
- `src/components/prompts` - Prompt-related components
- `src/components/prompts/admin` - Admin components for prompts

## API Implementation

### OpenAI Integration - March 9, 2025

- Using OpenAI API for chat completions
- Implemented robust error handling for API calls
- Using `gpt-4o-mini` model for chat completions
- Using `text-embedding-3-small` for embeddings

### Pinecone Integration - March 9, 2025

- Using Pinecone for vector storage and retrieval
- Implemented robust error handling for Pinecone initialization
- Using vector similarity search with a threshold of 0.3
- Retrieving top 5 most relevant document chunks

## Error Handling

### Build Errors - March 9, 2025

- Fixed EPERM error related to the `.next/trace` file by modifying Next.js configuration
- Fixed issues with Tailwind Config type import
- Removed unused code in use-toast.ts
- Addressed permission issues with .next directory
- Fixed font manifest error by simplifying font configuration

### Database Connection Errors - May 29, 2024

- Fixed password authentication error for PostgreSQL connection
- Issue: Special characters in password (@) causing URL parsing issues
- Solution: URL-encoded the password in the DATABASE_URL environment variable
- Example: Changed `postgres://postgres:Pgpostgres@24@localhost:5432/RAG_test` to `postgres://postgres:Pgpostgres%4024@localhost:5432/RAG_test`
- Note: The @ symbol in passwords must be URL-encoded as %40 in connection strings

### Runtime Errors - March 9, 2025

- Implemented robust error handling for OpenAI and Pinecone initialization
- Used type guards to handle different stream types in OpenAI stream utility
- Simplified the chat API route to reduce complexity
- Added proper error handling for API requests with response status checking
- Implemented fallback values for missing or inconsistent data
- Added console logging for debugging data normalization issues
- Set empty state for data when API requests fail to prevent infinite loading

## User Preferences

### Code Style - March 8, 2025

- Using TypeScript for type safety
- Following Next.js best practices
- Using client components only when necessary
- Separating server and client components for better performance

### UI Design - March 9, 2025

- Using a clean, modern design
- Implementing responsive layouts
- Using Tailwind CSS for styling
- Using system font stack for better performance and reliability
- Following accessibility best practices
- Using subtle hover effects for interactive elements
- Implementing consistent spacing and alignment
- Using semantic color schemes for status indicators
- Ensuring proper contrast for text readability

## Deployment

### Vercel Configuration - March 8, 2025

- Created vercel.json for deployment configuration
- Set up environment variables for Vercel
- Configured build settings for production

### Database Configuration - March 9, 2025

- Explicitly disable SSL for local development to prevent connection errors
- Use environment variables for all database connection parameters
- Set PG_SSL flag in environment variables to control SSL usage
- Simplify database connection pool configuration for better reliability
- Ensure proper NODE_ENV setting in environment variables

## Project Patterns - March 8, 2025

### File Structure

- Next.js app router structure is used
- Components are organized by feature in the `src/components` directory
- Utility functions are in the `src/lib` directory
- Hooks are in the `src/hooks` directory
- Types are in the `src/types` directory
- API routes are in the `src/app/api` directory

### Coding Patterns

- TypeScript is used throughout the project
- React Server Components are used where possible
- Client components are marked with "use client" directive
- Tailwind CSS is used for styling
- Shadcn/ui components are used for UI elements
- Zustand is used for global state management
- React Context is used for component-level state sharing

### Naming Conventions

- Components use PascalCase (e.g., `FileUpload.tsx`)
- Hooks use camelCase with `use` prefix (e.g., `useChat.ts`)
- Utility functions use camelCase (e.g., `parseDocument.ts`)
- Types use PascalCase with descriptive names (e.g., `FileUploadProps`)
- API routes use kebab-case (e.g., `/api/process-document`)

## User Preferences - March 8, 2025

### Documentation

- Add JSDoc comments for functions and components
- Include type definitions for all functions
- Document complex logic with inline comments
- Keep Memory Bank documentation up to date

### Testing

- Write unit tests for utility functions
- Write integration tests for critical user flows
- Use mock data for testing API responses

## Known Challenges - March 8, 2025

### Technical Challenges

- Handling large file uploads efficiently
- Processing different document formats consistently
- Managing vector database performance
- Implementing streaming responses with proper error handling
- Balancing context window size with relevance in RAG

### UX Challenges

- Providing clear guidance for file uploads
- Displaying citations and sources in chat responses
- Creating a responsive design that works well on all devices
- Balancing simplicity with feature richness

## Project Evolution - March 8, 2025

### Initial Approach

- Started with a simple chat interface
- Added file upload functionality
- Integrated with OpenAI API
- Set up Pinecone for vector storage

### Current Direction

- Focusing on multiple use case templates
- Improving document processing pipeline
- Enhancing chat experience with streaming and citations
- Adding user authentication and file management

### Future Plans

- Add analytics for tracking user engagement
- Implement A/B testing for UI variations
- Develop mobile app version
- Add more sophisticated document processing features

## Tool Usage Patterns - March 8, 2025

### Development Tools

- VS Code for code editing
- Git for version control
- npm for package management
- Vercel for deployment
- ESLint and Prettier for code quality

### Libraries and Frameworks

- Next.js for frontend and API routes
- React for UI components
- Tailwind CSS for styling
- Shadcn/ui for UI components
- Zustand for state management
- Langchain for RAG implementation
- OpenAI API for chat and embeddings
- Pinecone for vector storage
- React Dropzone for file uploads

## Security Considerations - March 8, 2025

### API Keys

- All API keys must be stored as environment variables
- Never expose API keys in client-side code
- Use server-side API routes to proxy requests to external services

### File Uploads

- Validate file types and sizes before processing
- Sanitize file names and content
- Store files securely with proper access controls
- Implement automatic file expiration

### User Data

- Encrypt sensitive data at rest and in transit
- Implement proper authentication and authorization
- Allow users to delete their data
- Comply with GDPR and CCPA requirements

## Next.js Configuration - March 9, 2025

- Modified next.config.js to handle permission issues with the .next/trace file
- Added dev:no-trace script to package.json as an alternative approach
- Configured webpack to exclude server-only modules on the client
- Set up serverExternalPackages for proper handling of external dependencies
- Removed unsupported experimental options (outputFileTracingIgnores, appDir)
- Removed deprecated swcMinify option
- Removed redundant serverComponentsExternalPackages option
- Added proper comments to clarify configuration options
- Ensured compatibility with Next.js 15.2.1
- Disabled poweredByHeader for security reasons
- Enabled reactStrictMode for better error detection

# Next.js Client Components Pattern - Added March 9, 2025 15:30 EST

## React Hooks in Next.js Components

When using React hooks (useState, useEffect, etc.) in Next.js components, the component MUST be marked as a client component using the "use client" directive at the top of the file. This is because React hooks can only be used in client-side code.

### Example Pattern:

```typescript
"use client";

import { useState, useEffect } from "react";
// ... rest of imports

export function ComponentWithHooks() {
  const [state, setState] = useState();
  // ... component code
}
```

### Common Hooks Requiring "use client":

- useState
- useEffect
- useContext
- useReducer
- useCallback
- useMemo
- useRef

### Implementation Rules:

1. Add "use client" directive at the very top of the file
2. Place it before any imports
3. Required for any component using React hooks
4. Also required for components using browser APIs
5. Parent components using client components should also be marked with "use client"

### Error Indicators:

If you see errors like:
"You're importing a component that needs 'useState'. This React hook only works in a client component."
or
"You're importing a component that needs 'useEffect'. This React hook only works in a client component."

The solution is to add "use client" at the top of the component file.

# Next.js Server Component Fetch Pattern - Added March 9, 2025 15:45 EST

## Server Component API Requests

When making fetch requests in Next.js server components, you must provide the full URL including the origin. This is because server components run on the server and don't have access to the client's origin.

### Example Pattern:

```typescript
// In server components or server-side functions
const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
const response = await fetch(`${baseUrl}/api/endpoint`);
```

### Implementation Rules:

1. Always use full URLs in server components
2. Use environment variables for the base URL
3. Provide a development fallback (localhost)
4. Document the required environment variables
5. Update both .env and .env.example files

### Error Indicators:

If you see errors like:
"Failed to parse URL from /api/endpoint"
or
"TypeError: Invalid URL"

The solution is to use the full URL including origin.

# Shadcn/ui Component Requirements - Added March 9, 2025 16:00 EST

## Select Component Rules

When using the Shadcn/ui Select component, there are specific requirements to follow:

### SelectItem Value Requirements

1. Every `<SelectItem />` must have a non-empty string value prop
2. Empty string values are reserved for clearing selection
3. For "All" or default options, use a specific value (e.g., "all") instead of an empty string

### Example Pattern:

```tsx
<Select>
  <SelectTrigger>
    <SelectValue placeholder="Select option" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="all">All Items</SelectItem>
    {items.map((item) => (
      <SelectItem key={item.id} value={item.id.toString()}>
        {item.name}
      </SelectItem>
    ))}
  </SelectContent>
</Select>
```

### Error Indicators:

If you see the error:
"A <SelectItem /> must have a value prop that is not an empty string"

The solution is to provide a non-empty string value for each SelectItem, using "all" or similar for default options.

## TypeScript Patterns - March 9, 2025

### Database Query Type Safety - March 9, 2025

When working with database query results, follow these patterns:

1. Define clear interfaces for expected row types:

```typescript
interface PromptRow {
  id: number;
  title: string;
  content: string;
  // other fields...
}
```

2. Create type guard functions to validate unknown data:

```typescript
function isPromptRow(row: unknown): row is PromptRow {
  return (
    typeof row === "object" &&
    row !== null &&
    "id" in row &&
    "title" in row &&
    "content" in row
  );
}
```

3. Use filter methods to ensure only valid data is processed:

```typescript
const validRows = rows.filter(isPromptRow).map((row) => ({
  id: row.id,
  title: row.title,
  // other fields...
}));
```

4. Add proper error handling for invalid data:

```typescript
if (!isPromptRow(row)) {
  throw new Error("Invalid data structure");
}
```

5. Avoid type assertions (as) in favor of proper validation:

```typescript
// Avoid this:
const id = (row as PromptRow).id;

// Do this instead:
if (isPromptRow(row)) {
  const id = row.id;
}
```

### Component Props Type Safety - March 9, 2025

When defining component props, follow these patterns:

1. Define clear interfaces for component props:

```typescript
interface ButtonProps {
  onClick: () => void;
  disabled?: boolean;
  children: React.ReactNode;
}
```

2. Use destructuring with default values:

```typescript
function Button({ onClick, disabled = false, children }: ButtonProps) {
  // Component implementation
}
```

3. Handle optional props safely:

```typescript
function Component({ value, onChange }: Props) {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (onChange) {
      onChange(e.target.value);
    }
  };
}
```

4. Use proper React event types:

```typescript
const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  // Handle form submission
};
```

## Development Environment - March 10, 2025 20:30 EST

### Terminal Command Behavior

When executing terminal commands in this environment, the first character of the command is sometimes trimmed. To prevent this issue:

- Always add a space at the beginning of terminal commands
- Example: ` curl http://localhost:3000/api/documents` instead of `

## Import Path Patterns - May 29, 2024

When importing files in the project, use the following patterns:

- For imports from the lib directory, use relative paths: `../../../lib/file-name`
- Do not use the `@/` prefix as it may cause module resolution issues
- The ContextManager is located at `src/lib/context-manager.ts` (with a hyphen)
- The ResponseOptimizer is located at `src/lib/response/ResponseOptimizer.ts`
- The TokenUsageTracker is located at `src/lib/analytics/TokenUsageTracker.ts`

## TokenUsageTracker Implementation - May 29, 2024

The TokenUsageTracker class has been simplified to not depend on the database:

- It now logs token usage to the console instead of saving to the database
- It has placeholder implementations for metrics and alerts methods
- It includes updated pricing for the latest OpenAI models
- It supports newer models like gpt-4o and gpt-4o-mini
- It uses a singleton pattern with getInstance() method
